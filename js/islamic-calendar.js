document.addEventListener("DOMContentLoaded", () => {
  // Elements
  const calendarContainer = document.getElementById("islamic-calendar")
  const monthYearDisplay = document.getElementById("month-year-display")
  const prevMonthBtn = document.getElementById("prev-month")
  const nextMonthBtn = document.getElementById("next-month")
  const calendarGrid = document.getElementById("calendar-grid")
  const importantEventsList = document.getElementById("important-events")

  // State
  const currentDate = new Date()
  let currentIslamicDate = {}
  let currentGregorianMonth = currentDate.getMonth()
  let currentGregorianYear = currentDate.getFullYear()

  // Initialize
  initCalendar()

  // Event listeners
  prevMonthBtn.addEventListener("click", () => {
    currentGregorianMonth--
    if (currentGregorianMonth < 0) {
      currentGregorianMonth = 11
      currentGregorianYear--
    }
    renderCalendar()
  })

  nextMonthBtn.addEventListener("click", () => {
    currentGregorianMonth++
    if (currentGregorianMonth > 11) {
      currentGregorianMonth = 0
      currentGregorianYear++
    }
    renderCalendar()
  })

  // Functions
  function initCalendar() {
    // Show loading state
    calendarContainer.innerHTML = `
      <div class="calendar-loading">
        <div class="spinner"></div>
        <p>Loading Islamic calendar...</p>
      </div>
    `

    // Get current Islamic date
    fetchIslamicDate(currentGregorianYear, currentGregorianMonth + 1, 1)
      .then((islamicDate) => {
        currentIslamicDate = islamicDate

        // Restore calendar structure
        calendarContainer.innerHTML = `
          <div class="calendar-header">
            <button class="calendar-nav-btn" id="prev-month">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="15 18 9 12 15 6"></polyline>
              </svg>
            </button>
            <div class="month-year-display" id="month-year-display">
              <div class="gregorian-date">April 2025</div>
              <div class="islamic-date">Sha'ban 1445</div>
            </div>
            <button class="calendar-nav-btn" id="next-month">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </button>
          </div>
          
          <div class="calendar-content">
            <div class="calendar-grid-container">
              <div class="calendar-grid" id="calendar-grid">
                <!-- Calendar will be generated by JavaScript -->
              </div>
              
              <div class="calendar-legend">
                <div class="legend-item">
                  <div class="legend-color religious-color"></div>
                  <span>Religious Event</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color holiday-color"></div>
                  <span>Holiday</span>
                </div>
                <div class="legend-item">
                  <div class="legend-color community-color"></div>
                  <span>Community Event</span>
                </div>
              </div>
            </div>
            
            <div class="important-events-container">
              <h3>Important Events</h3>
              <ul class="important-events" id="important-events">
                <!-- Events will be generated by JavaScript -->
              </ul>
            </div>
          </div>
        `

        // Re-attach event listeners
        document.getElementById("prev-month").addEventListener("click", () => {
          currentGregorianMonth--
          if (currentGregorianMonth < 0) {
            currentGregorianMonth = 11
            currentGregorianYear--
          }
          renderCalendar()
        })

        document.getElementById("next-month").addEventListener("click", () => {
          currentGregorianMonth++
          if (currentGregorianMonth > 11) {
            currentGregorianMonth = 0
            currentGregorianYear++
          }
          renderCalendar()
        })

        // Update references
        const monthYearDisplay = document.getElementById("month-year-display")
        const calendarGrid = document.getElementById("calendar-grid")
        const importantEventsList = document.getElementById("important-events")

        renderCalendar()
      })
      .catch((error) => {
        console.error("Error fetching Islamic date:", error)
        showCalendarError()
      })
  }

  function renderCalendar() {
    // Update month and year display
    updateMonthYearDisplay()

    // Clear previous calendar
    calendarGrid.innerHTML = ""

    // Add weekday headers
    const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    weekdays.forEach((day) => {
      const dayElement = document.createElement("div")
      dayElement.className = "calendar-weekday"
      dayElement.textContent = day
      calendarGrid.appendChild(dayElement)
    })

    // Get first day of month and number of days in month
    const firstDay = new Date(currentGregorianYear, currentGregorianMonth, 1).getDay()
    const daysInMonth = new Date(currentGregorianYear, currentGregorianMonth + 1, 0).getDate()

    // Add empty cells for days before start of month
    for (let i = 0; i < firstDay; i++) {
      const emptyDay = document.createElement("div")
      emptyDay.className = "calendar-day empty"
      calendarGrid.appendChild(emptyDay)
    }

    // Fetch Islamic date for the first day of the month
    fetchIslamicDate(currentGregorianYear, currentGregorianMonth + 1, 1)
      .then((firstDayIslamic) => {
        // Store the first day's Islamic date
        const firstIslamicDay = Number.parseInt(firstDayIslamic.day)
        const islamicMonth = firstDayIslamic.month
        const islamicYear = firstDayIslamic.year

        // Add days of the month
        for (let day = 1; day <= daysInMonth; day++) {
          const dayElement = document.createElement("div")
          dayElement.className = "calendar-day"

          // Check if this is today
          const isToday = isCurrentDay(day)
          if (isToday) {
            dayElement.classList.add("today")
          }

          // Calculate Islamic day (simple approximation)
          const islamicDay = (firstIslamicDay + day - 1) % 30
          const adjustedIslamicDay = islamicDay === 0 ? 30 : islamicDay

          // Check if this day has an Islamic event
          const islamicEvent = getIslamicEventForDay(adjustedIslamicDay, islamicMonth)
          if (islamicEvent) {
            dayElement.classList.add("has-event")
            dayElement.classList.add(islamicEvent.type)

            const eventIndicator = document.createElement("div")
            eventIndicator.className = "event-indicator"
            dayElement.appendChild(eventIndicator)

            // Add tooltip
            dayElement.setAttribute("title", islamicEvent.name)
          }

          // Add day number
          const dayNumber = document.createElement("span")
          dayNumber.textContent = day
          dayElement.appendChild(dayNumber)

          // Add Islamic date
          const islamicDayElement = document.createElement("div")
          islamicDayElement.className = "islamic-date"
          islamicDayElement.textContent = adjustedIslamicDay
          dayElement.appendChild(islamicDayElement)

          calendarGrid.appendChild(dayElement)
        }

        // Render important Islamic events
        renderImportantEvents(islamicMonth, islamicYear)
      })
      .catch((error) => {
        console.error("Error fetching Islamic date for calendar:", error)
        // Fallback to simple calendar without Islamic dates
        for (let day = 1; day <= daysInMonth; day++) {
          const dayElement = document.createElement("div")
          dayElement.className = "calendar-day"

          // Check if this is today
          const isToday = isCurrentDay(day)
          if (isToday) {
            dayElement.classList.add("today")
          }

          // Add day number
          const dayNumber = document.createElement("span")
          dayNumber.textContent = day
          dayElement.appendChild(dayNumber)

          calendarGrid.appendChild(dayElement)
        }
      })
  }

  function updateMonthYearDisplay() {
    const date = new Date(currentGregorianYear, currentGregorianMonth, 1)
    const gregorianMonthYear = date.toLocaleString("default", { month: "long", year: "numeric" })

    // Fetch Islamic date for the current month
    fetchIslamicDate(currentGregorianYear, currentGregorianMonth + 1, 1)
      .then((islamicDate) => {
        const islamicMonthYear = `${islamicDate.month} ${islamicDate.year} AH`

        if (monthYearDisplay) {
          monthYearDisplay.innerHTML = `
            <div class="gregorian-date">${gregorianMonthYear}</div>
            <div class="islamic-date">${islamicMonthYear}</div>
          `
        }
      })
      .catch((error) => {
        console.error("Error updating month/year display:", error)
        if (monthYearDisplay) {
          monthYearDisplay.innerHTML = `
            <div class="gregorian-date">${gregorianMonthYear}</div>
            <div class="islamic-date">Islamic date unavailable</div>
          `
        }
      })
  }

  function isCurrentDay(day) {
    const today = new Date()
    return (
      today.getDate() === day &&
      today.getMonth() === currentGregorianMonth &&
      today.getFullYear() === currentGregorianYear
    )
  }

  function getIslamicEventForDay(islamicDay, islamicMonth) {
    // Common Islamic events
    const events = [
      { day: 1, month: "Muharram", name: "Islamic New Year", type: "holiday" },
      { day: 10, month: "Muharram", name: "Day of Ashura", type: "religious" },
      { day: 12, month: "Rabi' al-Awwal", name: "Mawlid al-Nabi", type: "religious" },
      { day: 27, month: "Rajab", name: "Isra and Mi'raj", type: "religious" },
      { day: 15, month: "Sha'ban", name: "Mid-Sha'ban", type: "religious" },
      { day: 1, month: "Ramadan", name: "First day of Ramadan", type: "religious" },
      { day: 27, month: "Ramadan", name: "Laylat al-Qadr", type: "religious" },
      { day: 1, month: "Shawwal", name: "Eid al-Fitr", type: "holiday" },
      { day: 8, month: "Dhu al-Hijjah", name: "Day of Tarwiyah", type: "religious" },
      { day: 9, month: "Dhu al-Hijjah", name: "Day of Arafah", type: "religious" },
      { day: 10, month: "Dhu al-Hijjah", name: "Eid al-Adha", type: "holiday" },
    ]

    // Find matching event
    return events.find((event) => event.day === islamicDay && event.month === islamicMonth)
  }

  function renderImportantEvents(islamicMonth, islamicYear) {
    // Clear previous events
    importantEventsList.innerHTML = ""

    // Get events for current Islamic month
    const monthEvents = getEventsForIslamicMonth(islamicMonth)

    // Add events to list
    if (monthEvents.length === 0) {
      const noEvents = document.createElement("li")
      noEvents.className = "no-events"
      noEvents.textContent = "No major Islamic events this month"
      importantEventsList.appendChild(noEvents)
    } else {
      monthEvents.forEach((event) => {
        const eventItem = document.createElement("li")
        eventItem.className = "event-item"

        eventItem.innerHTML = `
          <div class="event-date">${event.day} ${islamicMonth}</div>
          <div class="event-details">
            <h4>${event.name}</h4>
            <p>${event.description}</p>
          </div>
        `

        importantEventsList.appendChild(eventItem)
      })
    }

    // Add community events
    const communityEvents = getCommunityEvents(currentGregorianMonth, currentGregorianYear)

    if (communityEvents.length > 0) {
      const communityHeader = document.createElement("li")
      communityHeader.className = "event-header"
      communityHeader.textContent = "Community Events"
      importantEventsList.appendChild(communityHeader)

      communityEvents.forEach((event) => {
        const eventItem = document.createElement("li")
        eventItem.className = "event-item community-event"

        eventItem.innerHTML = `
          <div class="event-date">${event.date}</div>
          <div class="event-details">
            <h4>${event.name}</h4>
            <p>${event.description}</p>
          </div>
        `

        importantEventsList.appendChild(eventItem)
      })
    }
  }

  function getEventsForIslamicMonth(islamicMonth) {
    // Events for each Islamic month
    const eventsByMonth = {
      Muharram: [
        { day: 1, name: "Islamic New Year", description: "First day of the Islamic calendar" },
        { day: 10, name: "Day of Ashura", description: "A day of fasting and remembrance" },
      ],
      "Rabi' al-Awwal": [{ day: 12, name: "Mawlid al-Nabi", description: "Birth of Prophet Muhammad (PBUH)" }],
      Rajab: [
        { day: 27, name: "Isra and Mi'raj", description: "The Night Journey and Ascension of Prophet Muhammad (PBUH)" },
      ],
      "Sha'ban": [{ day: 15, name: "Mid-Sha'ban", description: "Night of forgiveness and spiritual awareness" }],
      Ramadan: [
        { day: 1, name: "First day of Ramadan", description: "Beginning of the holy month of fasting" },
        { day: 27, name: "Laylat al-Qadr", description: "The Night of Power, when the Quran was first revealed" },
      ],
      Shawwal: [
        { day: 1, name: "Eid al-Fitr", description: "Festival of Breaking the Fast, marking the end of Ramadan" },
      ],
      "Dhu al-Hijjah": [
        { day: 8, name: "Day of Tarwiyah", description: "First day of Hajj rituals" },
        { day: 9, name: "Day of Arafah", description: "Second day of Hajj pilgrimage and a day of fasting" },
        {
          day: 10,
          name: "Eid al-Adha",
          description: "Festival of Sacrifice, commemorating Prophet Ibrahim's willingness to sacrifice his son",
        },
      ],
    }

    return eventsByMonth[islamicMonth] || []
  }

  function getCommunityEvents(gregorianMonth, gregorianYear) {
    // Sample community events - in a real app, these would come from a database
    const monthNames = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ]

    const events = [
      { month: 3, date: "April 10", name: "Community Iftar", description: "Join us for community iftar at the masjid" },
      {
        month: 3,
        date: "April 21",
        name: "Charity Drive",
        description: "Monthly charity collection for local families in need",
      },
      {
        month: 3,
        date: "April 27",
        name: "Quran Competition",
        description: "Annual Quran recitation competition for children",
      },
      {
        month: 4,
        date: "May 15",
        name: "Islamic Education Workshop",
        description: "Workshop on Islamic education for parents",
      },
      {
        month: 5,
        date: "June 5",
        name: "Summer Quran Program",
        description: "Registration begins for summer Quran program",
      },
      {
        month: 7,
        date: "August 12",
        name: "Back to School Drive",
        description: "Collecting school supplies for children in need",
      },
    ]

    return events.filter((event) => event.month === gregorianMonth)
  }

  async function fetchIslamicDate(year, month, day) {
    try {
      // Format date for API
      const formattedDate = `${day}-${month}-${year}`

      // Use the Aladhan API to convert Gregorian to Hijri
      const response = await fetch(`https://api.aladhan.com/v1/gToH?date=${formattedDate}`)

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`)
      }

      const data = await response.json()

      if (data.code === 200 && data.data) {
        return {
          day: data.data.hijri.day,
          month: data.data.hijri.month.en,
          year: data.data.hijri.year,
        }
      } else {
        throw new Error("Invalid API response format")
      }
    } catch (error) {
      console.error("Error fetching Islamic date:", error)

      // Fallback to estimated date if API fails
      return {
        day: "1",
        month: "Unknown",
        year: "1445",
      }
    }
  }

  function showCalendarError() {
    calendarContainer.innerHTML = `
      <div class="calendar-error">
        <p>Unable to load Islamic calendar. Please try again later.</p>
        <button id="retry-calendar" class="retry-button">Retry</button>
      </div>
    `

    document.getElementById("retry-calendar").addEventListener("click", initCalendar)
  }
})
